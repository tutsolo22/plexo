version: '3.8'

services:
  # ================================
  # Aplicaci√≥n Principal
  # ================================
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: gestion-eventos-app
    restart: unless-stopped
    ports:
      - "3250:3250"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - REDIS_URL=${REDIS_URL}
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_REDIS_CACHE=${ENABLE_REDIS_CACHE:-true}
      - CACHE_TTL=${CACHE_TTL:-3600}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gestion-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # Base de Datos PostgreSQL
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: gestion-eventos-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - gestion-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: gestion-eventos-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - gestion-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ================================
  # Nginx Proxy Reverso
  # ================================
  nginx:
    image: nginx:alpine
    container_name: gestion-eventos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - gestion-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  gestion-network:
    driver: bridge