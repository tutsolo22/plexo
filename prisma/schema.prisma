generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BusinessIdentity {
  id             String          @id @default(cuid())
  name           String
  address        String?
  phone          String?
  email          String?
  logo           String?
  slogan         String?
  facebook       String?
  instagram      String?
  twitter        String?
  website        String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  tenantId       String
  tenant         Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  emailTemplates EmailTemplate[]
  locations      Location[]
  quoteTemplates QuoteTemplate[]

  @@index([tenantId])
  @@index([isActive])
  @@map("business_identities")
}

model Location {
  id                 String           @id @default(cuid())
  name               String
  address            String
  latitude           Float?
  longitude          Float?
  description        String?
  isActive           Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  businessIdentityId String
  businessIdentity   BusinessIdentity @relation(fields: [businessIdentityId], references: [id], onDelete: Cascade)
  rooms              Room[]

  @@index([businessIdentityId])
  @@map("locations")
}

model User {
  id                 String          @id @default(cuid())
  email              String          @unique
  password           String?
  mustChangePassword Boolean         @default(false)
  name               String?
  role               LegacyUserRole  @default(USER)
  isActive           Boolean         @default(true)
  emailVerified      DateTime?
  image              String?
  activationCode     String?
  isExternal         Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tenantId           String
  accounts           Account[]
  auditLogs          AuditLog[]
  clientCredits      ClientCredits[]
  client             Client?
  emailChanges       EmailChange[]
  quoteComments      QuoteComment[]
  assignedRoles      UserRole[]      @relation("AssignedRoles")
  userRoles          UserRole[]
  tenant             Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Conversation {
  id        String    @id @default(uuid())
  userId    String
  platform  String    @default("web")
  userPhone String?
  status    String    @default("active")
  endedAt   DateTime?
  metadata  Json      @default("{}")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relaciones
  messages ConversationMessage[]

  @@index([userId])
  @@index([platform])
  @@index([status])
  @@map("conversations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  type        RoleType
  description String?
  isActive    Boolean      @default(true)
  tenantId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  tenant      Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles   UserRole[]

  @@index([type])
  @@index([tenantId])
  @@map("roles")
}

model UserRole {
  id             String    @id @default(cuid())
  userId         String
  roleId         String
  tenantId       String?
  assignedAt     DateTime  @default(now())
  assignedBy     String?
  expiresAt      DateTime?
  isActive       Boolean   @default(true)
  assignedByUser User?     @relation("AssignedRoles", fields: [assignedBy], references: [id])
  role           Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenant         Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, tenantId])
  @@index([userId])
  @@index([roleId])
  @@index([tenantId])
  @@map("user_roles")
}

model Permission {
  id         String             @id @default(cuid())
  roleId     String
  action     PermissionAction
  resource   PermissionResource
  conditions Json?
  createdAt  DateTime           @default(now())
  role       Role               @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, action, resource])
  @@index([roleId])
  @@index([action])
  @@index([resource])
  @@map("permissions")
}

model Tenant {
  id                 String             @id @default(cuid())
  name               String
  domain             String             @unique
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  auditLogs          AuditLog[]
  businessIdentities BusinessIdentity[]
  clients            Client[]
  configurations     Configuration[]
  emailTemplates     EmailTemplate[]
  events             Event[]
  masterEvents       MasterEvent[]
  packageTemplates   PackageTemplate[]
  packages           Package[]
  payments           Payment[]
  priceLists         PriceList[]
  products           Product[]
  quoteTemplates     QuoteTemplate[]
  quotes             Quote[]
  roles              Role[]
  services           Service[]
  suppliers          Supplier[]
  userRoles          UserRole[]
  users              User[]
  venues             Venue[]
  workShifts         WorkShift[]

  @@map("tenants")
}

model WorkShift {
  id          String        @id @default(cuid())
  name        String
  startTime   DateTime
  endTime     DateTime
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tenantId    String
  roomPricing RoomPricing[]
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("work_shifts")
}

model PriceList {
  id          String        @id @default(cuid())
  name        String
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tenantId    String
  clients     Client[]
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roomPricing RoomPricing[]

  @@index([tenantId])
  @@map("price_lists")
}

model Room {
  id          String        @id @default(cuid())
  name        String
  description String?
  minCapacity Int
  maxCapacity Int
  color       String        @default("#3B82F6")
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  locationId  String
  venueId     String
  events      Event[]
  roomPricing RoomPricing[]
  location    Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  venue       Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([venueId])
  @@map("rooms")
}

model RoomPricing {
  id          String    @id @default(cuid())
  price       Decimal   @db.Decimal(10, 2)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  roomId      String
  workShiftId String
  priceListId String
  priceList   PriceList @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  workShift   WorkShift @relation(fields: [workShiftId], references: [id], onDelete: Cascade)

  @@unique([roomId, workShiftId, priceListId])
  @@index([roomId])
  @@index([workShiftId])
  @@index([priceListId])
  @@map("room_pricing")
}

model PackageTemplate {
  id              String                @id @default(cuid())
  name            String
  description     String?
  type            PackageType           @default(BASICO)
  basePrice       Decimal?              @db.Decimal(10, 2)
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  tenantId        String
  packageItems    PackageTemplateItem[]
  tenant          Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  packageUpgrades PackageUpgrade[]
  packages        Package[]

  @@index([tenantId])
  @@index([type])
  @@map("package_templates")
}

model PackageTemplateItem {
  id                String          @id @default(cuid())
  quantity          Int             @default(1)
  description       String?
  packageTemplateId String
  productId         String?
  serviceId         String?
  packageTemplate   PackageTemplate @relation(fields: [packageTemplateId], references: [id], onDelete: Cascade)
  product           Product?        @relation(fields: [productId], references: [id])
  service           Service?        @relation(fields: [serviceId], references: [id])

  @@index([packageTemplateId])
  @@map("package_template_items")
}

model PackageUpgrade {
  id                String          @id @default(cuid())
  name              String
  description       String
  additionalPrice   Decimal         @db.Decimal(10, 2)
  upgradeType       PackageType
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  packageTemplateId String
  packageTemplate   PackageTemplate @relation(fields: [packageTemplateId], references: [id], onDelete: Cascade)

  @@index([packageTemplateId])
  @@map("package_upgrades")
}

model Venue {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        VenueType
  capacity    Int?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imagenes    String[]
  tenantId    String
  events      Event[]
  rooms       Room[]
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([isActive])
  @@index([type])
  @@map("venues")
}

model BotSession {
  id        String   @id @default(uuid())
  tenantId  String
  phone     String
  state     String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phone, tenantId])
}

model BotMessage {
  id        String   @id @default(uuid())
  tenantId  String
  phone     String
  direction String
  text      String?
  imageUrl  String?
  createdAt DateTime @default(now())
}

model SupplierProduct {
  id           String   @id @default(cuid())
  cost         Decimal  @db.Decimal(10, 2)
  deliveryDays Int      @default(1)
  minQuantity  Int?     @default(1)
  notes        String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  supplierId   String
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier     Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
  @@index([productId])
  @@map("supplier_products")
}

model SupplierService {
  id           String   @id @default(cuid())
  pricePerUnit Decimal  @db.Decimal(10, 2)
  unit         String
  minQuantity  Int?     @default(1)
  notes        String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  supplierId   String
  serviceId    String
  service      Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  supplier     Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId])
  @@index([serviceId])
  @@map("supplier_services")
}

model Client {
  id               String          @id @default(cuid())
  name             String
  email            String
  phone            String?
  address          String?
  type             ClientType      @default(GENERAL)
  discountPercent  Decimal?        @db.Decimal(5, 2)
  eventCounter     Int             @default(0)
  freeEventsTarget Int?
  notes            String?
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  tenantId         String
  priceListId      String?
  userId           String?         @unique
  clientCredits    ClientCredits[]
  priceList        PriceList?      @relation(fields: [priceListId], references: [id])
  tenant           Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user             User?           @relation(fields: [userId], references: [id])
  events           Event[]
  loyaltyPoints    LoyaltyPoints[]
  masterEvents     MasterEvent[]
  quotes           Quote[]

  @@unique([email, tenantId])
  @@index([tenantId])
  @@index([type])
  @@index([isActive])
  @@map("clients")
}

model ClientCredits {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  description String
  type        String
  createdAt   DateTime @default(now())
  clientId    String
  userId      String
  quoteId     String?
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  quote       Quote?   @relation(fields: [quoteId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([type])
  @@map("client_credits")
}

model LoyaltyPoints {
  id          String   @id @default(cuid())
  points      Int
  description String
  type        String
  createdAt   DateTime @default(now())
  clientId    String
  eventId     String?
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  event       Event?   @relation(fields: [eventId], references: [id])

  @@index([clientId])
  @@map("loyalty_points")
}

model Product {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  cost                 Decimal?              @db.Decimal(10, 2)
  price                Decimal               @db.Decimal(10, 2)
  itemType             ItemType              @default(VENTA)
  unit                 String                @default("pieza")
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  tenantId             String
  packageItems         PackageItem[]
  packageTemplateItems PackageTemplateItem[]
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  supplierProducts     SupplierProduct[]

  @@index([tenantId])
  @@map("products")
}

model Service {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  price                Decimal               @db.Decimal(10, 2)
  itemType             ItemType              @default(VENTA)
  unit                 String                @default("servicio")
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  tenantId             String
  packageItems         PackageItem[]
  packageTemplateItems PackageTemplateItem[]
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  supplierServices     SupplierService[]

  @@index([tenantId])
  @@map("services")
}

model MasterEvent {
  id          String   @id @default(cuid())
  name        String
  description String?
  clientId    String
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String
  events      Event[]
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([clientId])
  @@map("master_events")
}

model Event {
  id            String          @id @default(cuid())
  title         String
  startDate     DateTime
  endDate       DateTime
  status        EventStatus     @default(RESERVED)
  notes         String?
  isFullVenue   Boolean         @default(false)
  colorCode     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  tenantId      String
  clientId      String
  roomId        String?
  venueId       String?
  masterEventId String?
  client        Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  masterEvent   MasterEvent?    @relation(fields: [masterEventId], references: [id])
  room          Room?           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  venue         Venue?          @relation(fields: [venueId], references: [id], onDelete: Cascade)
  loyaltyPoints LoyaltyPoints[]
  quote         Quote?

  @@index([tenantId])
  @@index([clientId])
  @@index([roomId])
  @@index([venueId])
  @@index([startDate])
  @@index([isFullVenue])
  @@index([masterEventId])
  @@map("events")
}

model Quote {
  id                String          @id @default(cuid())
  quoteNumber       String          @unique
  status            QuoteStatus     @default(DRAFT)
  subtotal          Decimal         @db.Decimal(10, 2)
  discount          Decimal         @default(0) @db.Decimal(10, 2)
  total             Decimal         @db.Decimal(10, 2)
  validUntil        DateTime
  notes             String?
  publicToken       String?         @unique
  templateId        String?
  generatedContent  Json?
  pdfUrl            String?
  version           Int             @default(1)
  previousVersionId String?
  sentAt            DateTime?
  viewedAt          DateTime?
  respondedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tenantId          String
  clientId          String
  eventId           String?         @unique
  clientCredits     ClientCredits[]
  emailLogs         EmailLog[]
  packages          Package[]
  payments          Payment[]
  comments          QuoteComment[]
  client            Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  event             Event?          @relation(fields: [eventId], references: [id])
  template          QuoteTemplate?  @relation(fields: [templateId], references: [id])
  tenant            Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([clientId])
  @@index([status])
  @@index([templateId])
  @@map("quotes")
}

model Package {
  id                String           @id @default(cuid())
  name              String
  description       String?
  subtotal          Decimal          @db.Decimal(10, 2)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  tenantId          String
  quoteId           String
  packageTemplateId String?
  packageItems      PackageItem[]
  packageTemplate   PackageTemplate? @relation(fields: [packageTemplateId], references: [id])
  quote             Quote            @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([quoteId])
  @@map("packages")
}

model PackageItem {
  id          String   @id @default(cuid())
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  description String?
  packageId   String
  productId   String?
  serviceId   String?
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id])
  service     Service? @relation(fields: [serviceId], references: [id])

  @@index([packageId])
  @@map("package_items")
}

model QuoteComment {
  id        String      @id @default(cuid())
  comment   String
  type      CommentType @default(INTERNAL_MANAGER)
  createdAt DateTime    @default(now())
  quoteId   String
  userId    String
  quote     Quote       @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id])

  @@index([quoteId])
  @@map("quote_comments")
}

model QuoteTemplate {
  id                 String           @id @default(cuid())
  name               String
  description        String?
  type               TemplateType     @default(QUOTE)
  category           String?
  htmlContent        String
  variables          Json?
  styles             Json?
  metadata           Json?
  isDefault          Boolean          @default(false)
  isActive           Boolean          @default(true)
  version            Int              @default(1)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  tenantId           String
  businessIdentityId String
  businessIdentity   BusinessIdentity @relation(fields: [businessIdentityId], references: [id], onDelete: Cascade)
  tenant             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quotes             Quote[]

  @@index([tenantId])
  @@index([businessIdentityId])
  @@index([type, category])
  @@map("quote_templates")
}

model EmailTemplate {
  id                 String            @id @default(cuid())
  name               String
  subject            String
  htmlContent        String
  textContent        String?
  variables          Json?
  category           EmailCategory
  isDefault          Boolean           @default(false)
  isActive           Boolean           @default(true)
  parentTemplateId   String?
  templateType       EmailTemplateType @default(CUSTOM)
  isGlobal           Boolean           @default(false)
  inheritanceLevel   Int               @default(0)
  metadata           Json?
  customizations     Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tenantId           String
  businessIdentityId String?
  businessIdentity   BusinessIdentity? @relation(fields: [businessIdentityId], references: [id], onDelete: Cascade)
  parentTemplate     EmailTemplate?    @relation("TemplateInheritance", fields: [parentTemplateId], references: [id])
  childTemplates     EmailTemplate[]   @relation("TemplateInheritance")
  tenant             Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([businessIdentityId])
  @@index([category])
  @@index([isDefault, category])
  @@index([parentTemplateId])
  @@index([templateType, isGlobal])
  @@index([inheritanceLevel])
  @@map("email_templates")
}

model Configuration {
  id        String   @id @default(cuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key])
  @@map("configurations")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  tableName String
  recordId  String
  oldData   Json?
  newData   Json?
  createdAt DateTime @default(now())
  tenantId  String
  userId    String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([tableName, recordId])
  @@map("audit_logs")
}

model Supplier {
  id        String            @id @default(cuid())
  name      String
  type      SupplierType
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  tenantId  String
  products  SupplierProduct[]
  services  SupplierService[]
  tenant    Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("suppliers")
}

model EmailChange {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("email_changes")
}

model EmailLog {
  id             String    @id @default(cuid())
  quoteId        String
  recipientEmail String
  subject        String
  template       String
  status         String
  messageId      String?
  trackingToken  String?   @unique
  sentAt         DateTime
  openedAt       DateTime?
  clickedAt      DateTime?
  failureReason  String?
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  quote          Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@index([quoteId])
  @@index([trackingToken])
  @@index([status])
  @@map("email_logs")
}

model Payment {
  id                      String        @id @default(cuid())
  quoteId                 String
  amount                  Decimal       @db.Decimal(10, 2)
  currency                String        @default("GTQ")
  status                  PaymentStatus @default(PENDING)
  paymentMethod           String
  mercadoPagoPreferenceId String?
  mercadoPagoPaymentId    String?
  externalReference       String        @unique
  transactionId           String?
  authorizationCode       String?
  installments            Int?
  metadata                Json?
  paidAt                  DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  tenantId                String
  quote                   Quote         @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  tenant                  Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([quoteId])
  @@index([externalReference])
  @@index([mercadoPagoPaymentId])
  @@index([status])
  @@map("payments")
}

enum LegacyUserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  MANAGER
  USER
  CLIENT_EXTERNAL
}

enum ClientType {
  GENERAL
  COLABORADOR
  EXTERNO
}

enum RoleType {
  SUPER_ADMIN
  TENANT_ADMIN
  MANAGER
  SALES
  COORDINATOR
  FINANCE
  USER
  CLIENT_EXTERNAL
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  APPROVE
  REJECT
  EXPORT
  IMPORT
}

enum PermissionResource {
  EVENTS
  CLIENTS
  QUOTES
  USERS
  ROLES
  REPORTS
  VENUES
  PRODUCTS
  SERVICES
  PACKAGES
  CONFIGURATIONS
}

enum EventStatus {
  RESERVED
  QUOTED
  CONFIRMED
  CANCELLED
}

enum QuoteStatus {
  DRAFT
  PENDING_MANAGER
  REJECTED_BY_MANAGER
  APPROVED_BY_MANAGER
  SENT_TO_CLIENT
  CLIENT_REQUESTED_CHANGES
  ACCEPTED_BY_CLIENT
  EXPIRED
  CANCELLED
}

enum PriceType {
  GENERAL
  FRIENDS
  CORPORATE
  VIP
  CUSTOM
}

enum PackageType {
  BASICO
  VIP
  GOLD
  DIAMANTE
}

enum SupplierType {
  PRODUCT
  SERVICE
}

enum ItemType {
  CONSUMO
  VENTA
}

enum PaymentStatus {
  PENDING
  APPROVED
  AUTHORIZED
  IN_PROCESS
  IN_MEDIATION
  REJECTED
  CANCELLED
  REFUNDED
  CHARGED_BACK
}

enum CommentType {
  INTERNAL_MANAGER
  CLIENT_FEEDBACK
  SYSTEM_NOTE
}

enum TemplateType {
  QUOTE
  CONTRACT
  INVOICE
  EMAIL
  PROPOSAL
}

enum EmailCategory {
  REGISTRATION
  PASSWORD_RESET
  ACTIVATION_REMINDER
  QUOTE_SEND
  QUOTE_ACCEPTED
  EVENT_CONFIRMATION
  EVENT_REMINDER
  MARKETING
  TEST
  GENERAL
}

// ===============================
// MODELOS DE IA (AI MODELS)
// ===============================


model ConversationMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String // 'user' | 'assistant'
  content        String
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())

  // Relaciones
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([role])
  @@map("conversation_messages")
}

model ContentEmbedding {
  id         String   @id @default(cuid())
  entityId   String
  entityType String // 'event', 'client', 'venue', etc.
  content    String
  embedding  Float[] // Vector embedding
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([entityId])
  @@index([entityType])
  @@map("content_embeddings")
}

enum EmailTemplateType {
  GLOBAL
  TENANT_BASE
  BUSINESS_BASE
  CUSTOM
  INHERITED
}

enum VenueType {
  VENUE
  ROOM
}

enum ProductType {
  PRODUCT
  SERVICE
  PACKAGE
}
